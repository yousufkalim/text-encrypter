{"version":3,"file":"index.umd.js","sources":["../src/utils/alphabet.js","../src/index.js"],"sourcesContent":["const alphabet = [\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n];\n\nexport default alphabet;\n","import alphabet from './utils/alphabet.js';\n\nconst encrypt = (plainText, shift = 1, ignoreSpecialChars = true) => {\n  let cipherArr = [];\n  let cipherLetter;\n\n  plainText.split('').map((letter) => {\n    if (ignoreSpecialChars) {\n      letter = alphabet.includes(letter.toLowerCase()) ? letter : ' ';\n    }\n    let code = letter.charCodeAt(letter);\n    if (letter === ' ') {\n      return cipherArr.push(letter);\n    }\n    // Uppercase letters\n    if (code >= 65 && code <= 90) {\n      cipherLetter = String.fromCharCode(((code - 65 + shift) % 26) + 65);\n    }\n    // Lowercase letters\n    else if (code >= 97 && code <= 122) {\n      cipherLetter = String.fromCharCode(((code - 97 + shift) % 26) + 97);\n    }\n    return cipherArr.push(cipherLetter);\n  });\n  return cipherArr.join('');\n};\n\nconst decrypt = (cipherText, shift = 1, ignoreSpecialChars = true) => {\n  let plainArr = [];\n  let plainLetter;\n\n  cipherText.split('').map((cipher) => {\n    if (ignoreSpecialChars) {\n      cipher = alphabet.includes(cipher.toLowerCase()) ? cipher : ' ';\n    }\n    let code = cipher.charCodeAt(cipher);\n    if (cipher === ' ') {\n      return plainArr.push(cipher);\n    }\n    // Uppercase letters\n    if (code >= 65 && code <= 90) {\n      let diff = code - 65 - shift;\n      if (diff >= 0) {\n        plainLetter = String.fromCharCode((diff % 26) + 65);\n      } else {\n        plainLetter = String.fromCharCode(((26 + diff) % 26) + 65);\n      }\n    }\n    // Lowercase letters\n    else if (code >= 97 && code <= 122) {\n      let diff = code - 97 - shift;\n      if (diff >= 0) {\n        plainLetter = String.fromCharCode((diff % 26) + 97);\n      } else {\n        plainLetter = String.fromCharCode(((26 + diff) % 26) + 97);\n      }\n    }\n    return plainArr.push(plainLetter);\n  });\n  return plainArr.join('');\n};\n\nexport { encrypt, decrypt };\n"],"names":["alphabet","cipherText","shift","ignoreSpecialChars","plainArr","split","map","cipher","includes","toLowerCase","code","charCodeAt","push","diff","plainLetter","String","fromCharCode","join","plainText","cipherArr","letter","cipherLetter"],"mappings":"uOAAA,IAAMA,EAAW,CACf,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,eCCc,SAACC,EAAYC,EAAWC,QAAN,IAALD,IAAAA,EAAQ,QAAqB,IAAlBC,IAAAA,GAAqB,GAC3D,MAAYC,EAAG,GA+Bf,OA5BAH,EAAWI,MAAM,IAAIC,IAAI,SAACC,GACpBJ,IACFI,EAASP,EAASQ,SAASD,EAAOE,eAAiBF,EAAS,KAE9D,IAAIG,EAAOH,EAAOI,WAAWJ,GAC7B,GAAe,MAAXA,EACF,OAAOH,EAASQ,KAAKL,GAGvB,GAAIG,GAAQ,IAAMA,GAAQ,GAAI,CAC5B,IAAQG,EAAGH,EAAO,GAAKR,EAErBY,EAAcC,OAAOC,aADnBH,GAAQ,EACyBA,EAAO,GAAM,IAEZ,GAAKA,GAAQ,GAAM,GAE3D,MAEK,GAAIH,GAAQ,IAAMA,GAAQ,IAAK,CAClC,MAAWA,EAAO,GAAKR,EAErBY,EAAcC,OAAOC,aADnBH,GAAQ,EACyBA,EAAO,GAAM,IAEZ,GAAKA,GAAQ,GAAM,GAE3D,CACA,SAAgBD,KAAKE,EACvB,KACgBG,KAAK,GACvB,YA1DgB,SAACC,EAAWhB,EAAWC,QAAN,IAALD,IAAAA,EAAQ,QAAGC,IAAAA,IAAAA,GAAqB,GAC1D,MAAagB,EAAG,GAqBhB,OAlBAD,EAAUb,MAAM,IAAIC,IAAI,SAACc,GACnBjB,IACFiB,EAASpB,EAASQ,SAASY,EAAOX,eAAiBW,EAAS,KAE9D,IAAQV,EAAGU,EAAOT,WAAWS,GAC7B,MAAe,MAAXA,EACKD,EAAUP,KAAKQ,IAGpBV,GAAQ,IAAMA,GAAQ,GACxBW,EAAeN,OAAOC,cAAeN,EAAO,GAAKR,GAAS,GAAM,IAGzDQ,GAAQ,IAAMA,GAAQ,MAC7BW,EAAeN,OAAOC,cAAeN,EAAO,GAAKR,GAAS,GAAM,KAElDiB,EAACP,KAAKS,GACxB,GACOF,EAAUF,KAAK,GACxB"}