{"version":3,"file":"index.modern.js","sources":["../src/utils/alphabet.js","../src/index.js"],"sourcesContent":["const alphabet = [\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n];\n\nexport default alphabet;\n","import alphabet from './utils/alphabet.js';\n\nconst encrypt = (plainText, shift = 1, ignoreSpecialChars = true) => {\n  let cipherArr = [];\n  let cipherLetter;\n\n  plainText.split('').map((letter) => {\n    if (ignoreSpecialChars) {\n      letter = alphabet.includes(letter.toLowerCase()) ? letter : ' ';\n    }\n    let code = letter.charCodeAt(letter);\n    if (letter === ' ') {\n      return cipherArr.push(letter);\n    }\n    // Uppercase letters\n    if (code >= 65 && code <= 90) {\n      cipherLetter = String.fromCharCode(((code - 65 + shift) % 26) + 65);\n    }\n    // Lowercase letters\n    else if (code >= 97 && code <= 122) {\n      cipherLetter = String.fromCharCode(((code - 97 + shift) % 26) + 97);\n    }\n    return cipherArr.push(cipherLetter);\n  });\n  return cipherArr.join('');\n};\n\nconst decrypt = (cipherText, shift = 1, ignoreSpecialChars = true) => {\n  let plainArr = [];\n  let plainLetter;\n\n  cipherText.split('').map((cipher) => {\n    if (ignoreSpecialChars) {\n      cipher = alphabet.includes(cipher.toLowerCase()) ? cipher : ' ';\n    }\n    let code = cipher.charCodeAt(cipher);\n    if (cipher === ' ') {\n      return plainArr.push(cipher);\n    }\n    // Uppercase letters\n    if (code >= 65 && code <= 90) {\n      let diff = code - 65 - shift;\n      if (diff >= 0) {\n        plainLetter = String.fromCharCode((diff % 26) + 65);\n      } else {\n        plainLetter = String.fromCharCode(((26 + diff) % 26) + 65);\n      }\n    }\n    // Lowercase letters\n    else if (code >= 97 && code <= 122) {\n      let diff = code - 97 - shift;\n      if (diff >= 0) {\n        plainLetter = String.fromCharCode((diff % 26) + 97);\n      } else {\n        plainLetter = String.fromCharCode(((26 + diff) % 26) + 97);\n      }\n    }\n    return plainArr.push(plainLetter);\n  });\n  return plainArr.join('');\n};\n\nexport { encrypt, decrypt };\n"],"names":["alphabet","encrypt","plainText","shift","ignoreSpecialChars","cipherLetter","cipherArr","split","map","letter","includes","toLowerCase","code","charCodeAt","push","String","fromCharCode","join","cipherText","plainLetter","cipher","diff","plainArr"],"mappings":"AAAA,MAAMA,EAAW,CACf,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KCxBIC,EAAU,CAACC,EAAWC,EAAQ,EAAGC,GAAqB,KAC1D,IACgBC,EADZC,EAAY,GAqBhB,OAlBAJ,EAAUK,MAAM,IAAIC,IAAKC,IACnBL,IACFK,EAAST,EAASU,SAASD,EAAOE,eAAiBF,EAAS,KAE9D,IAAQG,EAAGH,EAAOI,WAAWJ,GAC7B,MAAe,MAAXA,EACKH,EAAUQ,KAAKL,IAGpBG,GAAQ,IAAMA,GAAQ,GACxBP,EAAeU,OAAOC,cAAeJ,EAAO,GAAKT,GAAS,GAAM,IAGzDS,GAAQ,IAAMA,GAAQ,MAC7BP,EAAeU,OAAOC,cAAeJ,EAAO,GAAKT,GAAS,GAAM,KAE3DG,EAAUQ,KAAKT,GAAY,KAEnBY,KAAK,GAAE,IAGV,CAACC,EAAYf,EAAQ,EAAGC,GAAqB,KAC3D,IACIe,IADW,GA+Bf,OA5BAD,EAAWX,MAAM,IAAIC,IAAKY,IACpBhB,IACFgB,EAASpB,EAASU,SAASU,EAAOT,eAAiBS,EAAS,KAE9D,IAAIR,EAAOQ,EAAOP,WAAWO,GAC7B,GAAe,MAAXA,EACF,SAAgBN,KAAKM,GAGvB,GAAIR,GAAQ,IAAMA,GAAQ,GAAI,CAC5B,MAAWA,EAAO,GAAKT,EAErBgB,EAAcJ,OAAOC,aADnBK,GAAQ,EACyBA,EAAO,GAAM,IAEZ,GAAKA,GAAQ,GAAM,GAE3D,SAEST,GAAQ,IAAMA,GAAQ,IAAK,CAClC,IAAIS,EAAOT,EAAO,GAAKT,EAErBgB,EAAcJ,OAAOC,aADnBK,GAAQ,EACyBA,EAAO,GAAM,IAEZ,GAAKA,GAAQ,GAAM,GAE3D,CACA,OAAeC,EAACR,KAAKK,EAAW,GAE3BG,EAASL,KAAK,GAAE"}